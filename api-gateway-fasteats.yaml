openapi: "3.0.1"
info:
  title: "API Gateway Festeats"
  version: "v.1.0.0"
servers:
  - url: "https://z6l6728toj.execute-api.us-east-1.amazonaws.com/{basePath}"
    variables:
      basePath:
        default: "prod"
paths:
  /sts-token:
    post:
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${aws_region}:lambda:path/2015-03-31/functions/${lambda_sts_arn}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
  /pedidos:
    post:
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
        - lambda-authorizer: []
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "http://${nlbpedido}/pedidos"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        type: "http"
components:
  schemas:
    Empty:
      title: "Empty Schema"
      type: "object"
  securitySchemes:
    lambda-authorizer:
      type: "apiKey"
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authtype: "custom"
      x-amazon-apigateway-authorizer:
        authorizerUri: "arn:aws:apigateway:${aws_region}:lambda:path/2015-03-31/functions/${lambda_authorizer_arn}/invocations"
        authorizerResultTtlInSeconds: 300
        identitySource: "method.request.header.Authorization"
        type: "request"
