openapi: "3.0.1"
info:
  title: "API Gateway FASTEATS"
  version: "v.1.0.0"
servers:
  - url: "https://z6l6728toj.execute-api.us-east-1.amazonaws.com/{basePath}"
    variables:
      basePath:
        default: "prod"
tags:
  - name: Status do Pedido
    description: Controller que gerencia os status de pedido
  - name: Categoria
    description: Controller que gerencia as categorias de produtos.
  - name: Produto
    description: Controller que gerencia os produtos
  - name: Pedido
    description: Controller que gerencia o processo de criação de um pedido
  - name: Produto do Pedido
    description: Controller que gerencia os itens do pedido
  - name: Cliente
    description: Controller que gerencia os clientes
  - name: Gerenciar Pedidos
    description: Controller que gerencia detalhes de um pedido.
  - name: STS
    description: Gerar Security token service.
paths:
  #STS
  /sts-token:
    post:
      tags:
        - STS
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:${aws_region}:lambda:path/2015-03-31/functions/${lambda_sts_arn}/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"

  #PEDIDOS
  /pedidos:
    get:
      tags:
        - Pedido
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: "http://${nlbpedido}/pedidos"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
    post:
      tags:
        - Pedido
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: "http://${nlbpedido}/pedidos"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  /pedidos/{idPedido}:
    get:
      tags:
        - Pedido
      parameters:
        - name: idPedido
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: "http://${nlbpedido}/pedidos/{idPedido}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.idPedido: method.request.path.idPedido
        passthroughBehavior: when_no_match
        type: http
    delete:
      tags:
        - Pedido
      parameters:
        - name: idPedido
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: DELETE
        uri: "http://${nlbpedido}/pedidos/{idPedido}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.idPedido: method.request.path.idPedido
        passthroughBehavior: when_no_match
        type: http
    patch:
      tags:
        - Pedido
      parameters:
        - name: idPedido
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: PATCH
        uri: "http://${nlbpedido}/pedidos/{idPedido}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.idPedido: method.request.path.idPedido
        passthroughBehavior: when_no_match
        type: http
  /pedidos/{idPedido}/cancelar:
    patch:
      tags:
        - Pedido
      parameters:
        - name: idPedido
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: PATCH
        uri: "http://${nlbpedido}/pedidos/{idPedido}/cancelar"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.idPedido: method.request.path.idPedido
        passthroughBehavior: when_no_match
        type: http
  /pedidos/{idPedido}/confirmar:
    patch:
      tags:
        - Pedido
      parameters:
        - name: idPedido
          in: path
          required: true
          schema:
            type: string
        - name: tipoPagamentoId
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: PATCH
        uri: "http://${nlbpedido}/pedidos/{idPedido}/confirmar"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: when_no_match
        type: http

  #PRODUTO PEDIDO
  /produto-pedido/{idPedido}/produtos:
    post:
      tags:
        - Produto do Pedido
      parameters:
        - name: idPedido
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: "http://${nlbpedido}/produto-pedido/{idPedido}/produtos"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.idPedido: method.request.path.idPedido
        passthroughBehavior: when_no_match
        type: http
  /produto-pedido/{idPedido}/produtos/{idProduto}:
    delete:
      tags:
        - Produto do Pedido
      parameters:
        - name: idPedido
          in: path
          required: true
          schema:
            type: string
        - name: idProduto
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: DELETE
        uri: "http://${nlbpedido}/produto-pedido/{idPedido}/produtos/{idProduto}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.idProduto: method.request.path.idProduto
          integration.request.path.idPedido: method.request.path.idPedido
        passthroughBehavior: when_no_match
        type: http
    patch:
      tags:
        - Produto do Pedido
      parameters:
        - name: idPedido
          in: path
          required: true
          schema:
            type: string
        - name: idProduto
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: PATCH
        uri: "http://${nlbpedido}/produto-pedido/{idPedido}/produtos/{idProduto}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.idProduto: method.request.path.idProduto
          integration.request.path.idPedido: method.request.path.idPedido
        passthroughBehavior: when_no_match
        type: http
#CLIENTES
  /clientes:
    get:
      tags:
        - Cliente
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: "http://${nlbpedido}/clientes"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: when_no_match
        type: http
    post:
      tags:
        - Cliente
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: "http://${nlbpedido}/clientes"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: when_no_match
        type: http
  /clientes/{cpf}:
    get:
      tags:
        - Cliente
      parameters:
        - name: cpf
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: "http://${nlbpedido}/clientes/{cpf}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.cpf: method.request.path.cpf
        passthroughBehavior: when_no_match
        type: http
    delete:
      tags:
        - Cliente
      parameters:
        - name: cpf
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: DELETE
        uri: "http://${nlbpedido}/clientes/{cpf}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.cpf: method.request.path.cpf
        passthroughBehavior: when_no_match
        type: http
    patch:
      tags:
        - Cliente
      parameters:
        - name: cpf
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: PATCH
        uri: "http://${nlbpedido}/clientes/{cpf}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.cpf: method.request.path.cpf
        passthroughBehavior: when_no_match
        type: http
#PRODUTOS
  /produtos:
    get:
      tags:
        - Produto
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: "http://${nlbpedido}/produtos"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: when_no_match
        type: http
    post:
      tags:
        - Produto
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: "http://${nlbpedido}/produtos"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: when_no_match
        type: http
  /produtos/consultar-por-categoria/{categoriaId}:
    get:
      tags:
        - Produto
      parameters:
        - name: categoriaId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: "http://${nlbpedido}/produtos/consultar-por-categoria/{categoriaId}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.categoriaId: method.request.path.categoriaId
        passthroughBehavior: when_no_match
        type: http
  /produtos/consultar-por-nome/{nome}:
    get:
      tags:
        - Produto
      parameters:
        - name: nome
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: "http://${nlbpedido}/produtos/consultar-por-nome/{nome}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.nome: method.request.path.nome
        passthroughBehavior: when_no_match
        type: http
  /produtos/{id}:
    get:
      tags:
        - Produto
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: "http://${nlbpedido}/produtos/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
    delete:
      tags:
        - Produto
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: DELETE
        uri: "http://${nlbpedido}/produtos/{id}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
    patch:
      tags:
        - Produto
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: PATCH
        uri: "http://${nlbpedido}/produtos/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
#CATEGORIAS
  /categorias:
    get:
      tags:
        - Categoria
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: "http://${nlbpedido}/categorias"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: when_no_match
        type: http
    post:
      tags:
        - Categoria
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: "http://${nlbpedido}/categorias"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: when_no_match
        type: http
  /categorias/consultar-por-nome/{nome}:
    get:
      tags:
        - Categoria
      parameters:
        - name: nome
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: "http://${nlbpedido}/categorias/consultar-por-nome/{nome}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.nome: method.request.path.nome
        passthroughBehavior: when_no_match
        type: http
  /categorias/{id}:
    get:
      tags:
        - Categoria
      operationId: "get/categorias/{id}"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: "http://${nlbpedido}/categorias/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
    delete:
      tags:
        - Categoria
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: DELETE
        uri: "http://${nlbpedido}/categorias/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
    patch:
      tags:
        - Categoria
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: PATCH
        uri: "http://${nlbpedido}/categorias/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
  #STATUS DO PEDIDO
  /status-pedidos:
    get:
      tags:
        - Status do Pedido
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: "http://${nlbpedido}/status-pedidos"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: when_no_match
        type: http
    post:
      tags:
        - Status do Pedido
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: "http://${nlbpedido}/status-pedidos"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: when_no_match
        type: http
  /status-pedidos/consultar-por-nome/{nome}:
    get:
      tags:
        - Status do Pedido
      parameters:
        - name: nome
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: "http://${nlbpedido}/status-pedidos/consultar-por-nome/{nome}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.nome: method.request.path.nome
        passthroughBehavior: when_no_match
        type: http
  /status-pedidos/{id}:
    get:
      tags:
        - Status do Pedido
      operationId: "get/status-pedidos/{id}"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: "http://${nlbpedido}/status-pedidos/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
    delete:
      tags:
        - Status do Pedido
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: DELETE
        uri: "http://${nlbpedido}/status-pedidos/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
    patch:
      tags:
        - Status do Pedido
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: PATCH
        uri: "http://${nlbpedido}/status-pedidos/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
  #GERENCIAR PEDIDOS
  /gerenciar/pedidos/andamento:
    get:
      tags:
        - Gerenciar Pedidos
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: "http://${nlbpedido}/gerenciar/pedidos/andamento"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: when_no_match
        type: http
  /gerenciar/pedidos/{id}:
    get:
      tags:
        - Gerenciar Pedidos
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: "http://${nlbpedido}/gerenciar/pedidos/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http

#COMPONENTES
components:
  schemas:
    Empty:
      title: "Empty Schema"
      type: "object"
  securitySchemes:
    lambda-authorizer:
      type: "apiKey"
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authtype: "custom"
      x-amazon-apigateway-authorizer:
        authorizerUri: "arn:aws:apigateway:${aws_region}:lambda:path/2015-03-31/functions/${lambda_authorizer_arn}/invocations"
        authorizerResultTtlInSeconds: 300
        identitySource: "method.request.header.Authorization"
        type: "request"
