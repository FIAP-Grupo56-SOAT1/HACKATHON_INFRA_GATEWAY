openapi: 3.0.1
info:
  title: soat1grupo56
  version: 2023-11-06T23:24:38Z
servers:
  - url: https://jcpoa1ejyl.execute-api.us-east-1.amazonaws.com/prod
paths:
  /categorias:
    get:
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: "http://${stageVariables.loadbalancer}/categorias"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: when_no_match
        type: http
    post:
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: "http://${stageVariables.loadbalancer}/categorias"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: when_no_match
        type: http
  /categorias/consultar-por-nome/{nome}:
    get:
      parameters:
        - name: nome
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: "http://${stageVariables.loadbalancer}/categorias/consultar-por-nome/{nome}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.nome: method.request.path.nome
        passthroughBehavior: when_no_match
        type: http
  /categorias/{id}:
    get:
      operationId: "get/categorias/{id}"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: "http://${stageVariables.loadbalancer}/categorias/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
    delete:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: DELETE
        uri: "http://${stageVariables.loadbalancer}/categorias/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
    patch:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: PATCH
        uri: "http://${stageVariables.loadbalancer}/categorias/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
  /clientes:
    get:
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: "http://${stageVariables.loadbalancer}/clientes"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: when_no_match
        type: http
    post:
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: "http://${stageVariables.loadbalancer}/clientes"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: when_no_match
        type: http
  /clientes/{cpf}:
    get:
      parameters:
        - name: cpf
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: "http://${stageVariables.loadbalancer}/clientes/{cpf}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.cpf: method.request.path.cpf
        passthroughBehavior: when_no_match
        type: http
    delete:
      parameters:
        - name: cpf
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: DELETE
        uri: "http://${stageVariables.loadbalancer}/clientes/{cpf}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.cpf: method.request.path.cpf
        passthroughBehavior: when_no_match
        type: http
    patch:
      parameters:
        - name: cpf
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: PATCH
        uri: "http://${stageVariables.loadbalancer}/clientes/{cpf}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.cpf: method.request.path.cpf
        passthroughBehavior: when_no_match
        type: http
  /cozinha-pedido/{idPedido}/finalizar-preparo:
    patch:
      parameters:
        - name: idPedido
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: PATCH
        uri: "http://${stageVariables.loadbalancer}/cozinha-pedido/{idPedido}/finalizar-preparo"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.idPedido: method.request.path.idPedido
        passthroughBehavior: when_no_match
        type: http
  /cozinha-pedido/{idPedido}/iniciar-preparo:
    patch:
      parameters:
        - name: idPedido
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: PATCH
        uri: "http://${stageVariables.loadbalancer}/cozinha-pedido/{idPedido}/iniciar-preparo"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.idPedido: method.request.path.idPedido
        passthroughBehavior: when_no_match
        type: http
  /cozinha-pedido/{idPedido}/retirar:
    patch:
      parameters:
        - name: idPedido
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: PATCH
        uri: "http://${stageVariables.loadbalancer}/cozinha-pedido/{idPedido}/retirar"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.idPedido: method.request.path.idPedido
        passthroughBehavior: when_no_match
        type: http
  /gerenciar/pedidos/andamento:
    get:
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: "http://${stageVariables.loadbalancer}/gerenciar/pedidos/andamento"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: when_no_match
        type: http
  /gerenciar/pedidos/{id}:
    get:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: "http://${stageVariables.loadbalancer}/gerenciar/pedidos/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
  /pagamento-externo/mercadopago-webhook:
    post:
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: "http://${stageVariables.loadbalancer}/pagamento-externo/mercadopago-webhook"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: when_no_match
        type: http
  /pagamento-externo/mercadopago-webhook-simulacao:
    post:
      parameters:
        - name: statusMercadoPago
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: "http://${stageVariables.loadbalancer}/pagamento-externo/mercadopago-webhook-simulacao"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: when_no_match
        type: http
  /pagamento-externo/mercadopago/{idPagamentoExterno}/cancelar:
    post:
      parameters:
        - name: idPagamentoExterno
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: "http://${stageVariables.loadbalancer}/pagamento-externo/mercadopago/{idPagamentoExterno}/cancelar"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.idPagamentoExterno: method.request.path.idPagamentoExterno
        passthroughBehavior: when_no_match
        type: http
  /pagamentos:
    get:
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: "http://${stageVariables.loadbalancer}/pagamentos"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: when_no_match
        type: http
  /pagamentos/{id}:
    get:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: "http://${stageVariables.loadbalancer}/pagamentos/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
  /pagamentos/{id}/alterar-forma-pagamento:
    put:
      parameters:
        - name: idFormaPagamento
          in: query
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: PUT
        uri: "http://${stageVariables.loadbalancer}/pagamentos/{id}/alterar-forma-pagamento"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
  /pagamentos/{id}/cancelar-pagamento:
    post:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: "http://${stageVariables.loadbalancer}/pagamentos/{id}/cancelar-pagamento"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
  /pagamentos/{id}/consultar-pagamento-por-id-pedido:
    get:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: "http://${stageVariables.loadbalancer}/pagamentos/{id}/consultar-pagamento-por-id-pedido"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
  /pagamentos/{id}/realizar-pagamento:
    post:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: "http://${stageVariables.loadbalancer}/pagamentos/{id}/realizar-pagamento"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
  /pedidos:
    get:
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: "http://${stageVariables.loadbalancer}/pedidos"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
    post:
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: "http://${stageVariables.loadbalancer}/pedidos"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
  /pedidos/{idPedido}:
    get:
      parameters:
        - name: idPedido
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: "http://${stageVariables.loadbalancer}/pedidos/{idPedido}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.idPedido: method.request.path.idPedido
        passthroughBehavior: when_no_match
        type: http
    delete:
      parameters:
        - name: idPedido
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: DELETE
        uri: "http://${stageVariables.loadbalancer}/pedidos/{idPedido}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.idPedido: method.request.path.idPedido
        passthroughBehavior: when_no_match
        type: http
    patch:
      parameters:
        - name: idPedido
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: PATCH
        uri: "http://${stageVariables.loadbalancer}/pedidos/{idPedido}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.idPedido: method.request.path.idPedido
        passthroughBehavior: when_no_match
        type: http
  /pedidos/{idPedido}/cancelar:
    patch:
      parameters:
        - name: idPedido
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: PATCH
        uri: "http://${stageVariables.loadbalancer}/pedidos/{idPedido}/cancelar"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.idPedido: method.request.path.idPedido
        passthroughBehavior: when_no_match
        type: http
  /pedidos/{idPedido}/confirmar:
    patch:
      parameters:
        - name: idPedido
          in: path
          required: true
          schema:
            type: string
        - name: tipoPagamentoId
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: PATCH
        uri: "http://${stageVariables.loadbalancer}/pedidos/{idPedido}/confirmar"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: when_no_match
        type: http
  /produto-pedido/{idPedido}/produtos:
    post:
      parameters:
        - name: idPedido
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: "http://${stageVariables.loadbalancer}/produto-pedido/{idPedido}/produtos"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.idPedido: method.request.path.idPedido
        passthroughBehavior: when_no_match
        type: http
  /produto-pedido/{idPedido}/produtos/{idProduto}:
    delete:
      parameters:
        - name: idPedido
          in: path
          required: true
          schema:
            type: string
        - name: idProduto
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: DELETE
        uri: "http://${stageVariables.loadbalancer}/produto-pedido/{idPedido}/produtos/{idProduto}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.idProduto: method.request.path.idProduto
          integration.request.path.idPedido: method.request.path.idPedido
        passthroughBehavior: when_no_match
        type: http
    patch:
      parameters:
        - name: idPedido
          in: path
          required: true
          schema:
            type: string
        - name: idProduto
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: PATCH
        uri: "http://${stageVariables.loadbalancer}/produto-pedido/{idPedido}/produtos/{idProduto}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.idProduto: method.request.path.idProduto
          integration.request.path.idPedido: method.request.path.idPedido
        passthroughBehavior: when_no_match
        type: http
  /produtos:
    get:
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: "http://${stageVariables.loadbalancer}/produtos"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: when_no_match
        type: http
    post:
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: POST
        uri: "http://${stageVariables.loadbalancer}/produtos"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: when_no_match
        type: http
  /produtos/consultar-por-categoria/{categoriaId}:
    get:
      parameters:
        - name: categoriaId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: "http://${stageVariables.loadbalancer}/produtos/consultar-por-categoria/{categoriaId}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.categoriaId: method.request.path.categoriaId
        passthroughBehavior: when_no_match
        type: http
  /produtos/consultar-por-nome/{nome}:
    get:
      parameters:
        - name: nome
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: "http://${stageVariables.loadbalancer}/produtos/consultar-por-nome/{nome}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.nome: method.request.path.nome
        passthroughBehavior: when_no_match
        type: http
  /produtos/{id}:
    get:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: "http://${stageVariables.loadbalancer}/produtos/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
    delete:
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: DELETE
        uri: "http://${stageVariables.loadbalancer}/produtos/{id}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestParameters:
          integration.request.header.Authorization: method.request.header.Authorization
        passthroughBehavior: when_no_match
        type: http
    patch:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: PATCH
        uri: "http://${stageVariables.loadbalancer}/produtos/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: method.request.path.id
        passthroughBehavior: when_no_match
        type: http
  /status-pagamentos:
    get:
      responses:
        "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      security:
        - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        uri: "http://${stageVariables.loadbalancer}/status-pagamentos"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: when_no_match
        type: http
  /status-pedidos:
    x-amazon-apigateway-any-method:
      produces:
        - application/json
      responses:
        "200":
          description: 200 response
          schema:
            $ref: '#/components/schemas/Empty'
      x-amazon-apigateway-integration:
        httpMethod: ANY
        uri: "http://${stageVariables.loadbalancer}/status-pedidos"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: when_no_match
        type: http
components:
  schemas:
    Empty:
      title: Empty Schema
      type: object
  securitySchemes:
    lambda_authorizador:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: custom
      x-amazon-apigateway-authorizer:
        authorizerUri: arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:389812301415:function:lambda_authorizer/invocations
        authorizerResultTtlInSeconds: 300
        identitySource: method.request.header.Authorization
        type: request
x-amazon-apigateway-gateway-responses:
  DEFAULT_4XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: "'DELETE,OPTIONS'"
      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  DEFAULT_5XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: "'DELETE,OPTIONS'"
      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
x-amazon-apigateway-policy:
  Version: 2012-10-17
  Statement:
    - Effect: Allow
      Principal: '*'
      Action: execute-api:Invoke
      Resource: '*'
x-original-swagger-version: "2.0"
