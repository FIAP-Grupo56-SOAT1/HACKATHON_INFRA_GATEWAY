---
swagger: "2.0"
info:
  version: "2023-11-06T23:24:38Z"
  title: "soat1grupo56"
host: "jcpoa1ejyl.execute-api.us-east-1.amazonaws.com"
basePath: "/prod"
schemes:
- "https"
paths:
  /categorias:
    get:
      produces:
      - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri: "http://${stageVariables.loadbalancer}/categorias"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        type: "http"
    post:
      produces:
      - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "http://${stageVariables.loadbalancer}/categorias"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        type: "http"
  /categorias/consultar-por-nome/{nome}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "nome"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri: "http://${stageVariables.loadbalancer}/categorias/consultar-por-nome/{nome}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.nome: "method.request.path.nome"
        passthroughBehavior: "when_no_match"
        type: "http"
  /categorias/{id}:
    get:
      operationId: "get/categorias/{id}"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri: "http://${stageVariables.loadbalancer}/categorias/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        type: "http"
    delete:
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "DELETE"
        uri: "http://${stageVariables.loadbalancer}/categorias/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        type: "http"
    patch:
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "PATCH"
        uri: "http://${stageVariables.loadbalancer}/categorias/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        type: "http"
  /clientes:
    get:
      produces:
      - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri: "http://${stageVariables.loadbalancer}/clientes"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        type: "http"
    post:
      produces:
      - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "http://${stageVariables.loadbalancer}/clientes"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        type: "http"
  /clientes/{cpf}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "cpf"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri: "http://${stageVariables.loadbalancer}/clientes/{cpf}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.cpf: "method.request.path.cpf"
        passthroughBehavior: "when_no_match"
        type: "http"
    delete:
      produces:
      - "application/json"
      parameters:
      - name: "cpf"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "DELETE"
        uri: "http://${stageVariables.loadbalancer}/clientes/{cpf}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.cpf: "method.request.path.cpf"
        passthroughBehavior: "when_no_match"
        type: "http"
    patch:
      produces:
      - "application/json"
      parameters:
      - name: "cpf"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "PATCH"
        uri: "http://${stageVariables.loadbalancer}/clientes/{cpf}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.cpf: "method.request.path.cpf"
        passthroughBehavior: "when_no_match"
        type: "http"
  /cozinha-pedido/{idPedido}/finalizar-preparo:
    patch:
      produces:
      - "application/json"
      parameters:
      - name: "idPedido"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "PATCH"
        uri: "http://${stageVariables.loadbalancer}/cozinha-pedido/{idPedido}/finalizar-preparo"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.idPedido: "method.request.path.idPedido"
        passthroughBehavior: "when_no_match"
        type: "http"
  /cozinha-pedido/{idPedido}/iniciar-preparo:
    patch:
      produces:
      - "application/json"
      parameters:
      - name: "idPedido"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "PATCH"
        uri: "http://${stageVariables.loadbalancer}/cozinha-pedido/{idPedido}/iniciar-preparo"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.idPedido: "method.request.path.idPedido"
        passthroughBehavior: "when_no_match"
        type: "http"
  /cozinha-pedido/{idPedido}/retirar:
    patch:
      produces:
      - "application/json"
      parameters:
      - name: "idPedido"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "PATCH"
        uri: "http://${stageVariables.loadbalancer}/cozinha-pedido/{idPedido}/retirar"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.idPedido: "method.request.path.idPedido"
        passthroughBehavior: "when_no_match"
        type: "http"
  /gerenciar/pedidos/andamento:
    get:
      produces:
      - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri: "http://${stageVariables.loadbalancer}/gerenciar/pedidos/andamento"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        type: "http"
  /gerenciar/pedidos/{id}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri: "http://${stageVariables.loadbalancer}/gerenciar/pedidos/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        type: "http"
  /pagamento-externo/mercadopago-webhook:
    post:
      produces:
      - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "http://${stageVariables.loadbalancer}/pagamento-externo/mercadopago-webhook"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        type: "http"
  /pagamento-externo/mercadopago-webhook-simulacao:
    post:
      produces:
      - "application/json"
      parameters:
      - name: "statusMercadoPago"
        in: "query"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "http://${stageVariables.loadbalancer}/pagamento-externo/mercadopago-webhook-simulacao"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        type: "http"
  /pagamento-externo/mercadopago/{idPagamentoExterno}/cancelar:
    post:
      produces:
      - "application/json"
      parameters:
      - name: "idPagamentoExterno"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "http://${stageVariables.loadbalancer}/pagamento-externo/mercadopago/{idPagamentoExterno}/cancelar"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.idPagamentoExterno: "method.request.path.idPagamentoExterno"
        passthroughBehavior: "when_no_match"
        type: "http"
  /pagamentos:
    get:
      produces:
      - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri: "http://${stageVariables.loadbalancer}/pagamentos"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        type: "http"
  /pagamentos/{id}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri: "http://${stageVariables.loadbalancer}/pagamentos/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        type: "http"
  /pagamentos/{id}/alterar-forma-pagamento:
    put:
      produces:
      - "application/json"
      parameters:
      - name: "idFormaPagamento"
        in: "query"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "PUT"
        uri: "http://${stageVariables.loadbalancer}/pagamentos/{id}/alterar-forma-pagamento"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        type: "http"
  /pagamentos/{id}/cancelar-pagamento:
    post:
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "http://${stageVariables.loadbalancer}/pagamentos/{id}/cancelar-pagamento"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        type: "http"
  /pagamentos/{id}/consultar-pagamento-por-id-pedido:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri: "http://${stageVariables.loadbalancer}/pagamentos/{id}/consultar-pagamento-por-id-pedido"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        type: "http"
  /pagamentos/{id}/realizar-pagamento:
    post:
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "http://${stageVariables.loadbalancer}/pagamentos/{id}/realizar-pagamento"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        type: "http"
  /pedidos:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri: "http://${stageVariables.loadbalancer}/pedidos"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
        passthroughBehavior: "when_no_match"
        type: "http"
    post:
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "http://${stageVariables.loadbalancer}/pedidos"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
        passthroughBehavior: "when_no_match"
        type: "http"
  /pedidos/{idPedido}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "idPedido"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri: "http://${stageVariables.loadbalancer}/pedidos/{idPedido}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.idPedido: "method.request.path.idPedido"
        passthroughBehavior: "when_no_match"
        type: "http"
    delete:
      produces:
      - "application/json"
      parameters:
      - name: "idPedido"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "DELETE"
        uri: "http://${stageVariables.loadbalancer}/pedidos/{idPedido}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.idPedido: "method.request.path.idPedido"
        passthroughBehavior: "when_no_match"
        type: "http"
    patch:
      produces:
      - "application/json"
      parameters:
      - name: "idPedido"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "PATCH"
        uri: "http://${stageVariables.loadbalancer}/pedidos/{idPedido}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.idPedido: "method.request.path.idPedido"
        passthroughBehavior: "when_no_match"
        type: "http"
  /pedidos/{idPedido}/cancelar:
    patch:
      produces:
      - "application/json"
      parameters:
      - name: "idPedido"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "PATCH"
        uri: "http://${stageVariables.loadbalancer}/pedidos/{idPedido}/cancelar"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.idPedido: "method.request.path.idPedido"
        passthroughBehavior: "when_no_match"
        type: "http"
  /pedidos/{idPedido}/confirmar:
    patch:
      produces:
      - "application/json"
      parameters:
      - name: "idPedido"
        in: "path"
        required: true
        type: "string"
      - name: "tipoPagamentoId"
        in: "query"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "PATCH"
        uri: "http://${stageVariables.loadbalancer}/pedidos/{idPedido}/confirmar"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        type: "http"
  /produto-pedido/{idPedido}/produtos:
    post:
      produces:
      - "application/json"
      parameters:
      - name: "idPedido"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "http://${stageVariables.loadbalancer}/produto-pedido/{idPedido}/produtos"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.idPedido: "method.request.path.idPedido"
        passthroughBehavior: "when_no_match"
        type: "http"
  /produto-pedido/{idPedido}/produtos/{idProduto}:
    delete:
      produces:
      - "application/json"
      parameters:
      - name: "idPedido"
        in: "path"
        required: true
        type: "string"
      - name: "idProduto"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "DELETE"
        uri: "http://${stageVariables.loadbalancer}/produto-pedido/{idPedido}/produtos/{idProduto}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.idProduto: "method.request.path.idProduto"
          integration.request.path.idPedido: "method.request.path.idPedido"
        passthroughBehavior: "when_no_match"
        type: "http"
    patch:
      produces:
      - "application/json"
      parameters:
      - name: "idPedido"
        in: "path"
        required: true
        type: "string"
      - name: "idProduto"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "PATCH"
        uri: "http://${stageVariables.loadbalancer}/produto-pedido/{idPedido}/produtos/{idProduto}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.idProduto: "method.request.path.idProduto"
          integration.request.path.idPedido: "method.request.path.idPedido"
        passthroughBehavior: "when_no_match"
        type: "http"
  /produtos:
    get:
      produces:
      - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri: "http://${stageVariables.loadbalancer}/produtos"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        type: "http"
    post:
      produces:
      - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "http://${stageVariables.loadbalancer}/produtos"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        type: "http"
  /produtos/consultar-por-categoria/{categoriaId}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "categoriaId"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri: "http://${stageVariables.loadbalancer}/produtos/consultar-por-categoria/{categoriaId}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.categoriaId: "method.request.path.categoriaId"
        passthroughBehavior: "when_no_match"
        type: "http"
  /produtos/consultar-por-nome/{nome}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "nome"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri: "http://${stageVariables.loadbalancer}/produtos/consultar-por-nome/{nome}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.nome: "method.request.path.nome"
        passthroughBehavior: "when_no_match"
        type: "http"
  /produtos/{id}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri: "http://${stageVariables.loadbalancer}/produtos/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        type: "http"
    delete:
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "DELETE"
        uri: "http://${stageVariables.loadbalancer}/produtos/{id}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.Authorization: "method.request.header.Authorization"
        passthroughBehavior: "when_no_match"
        type: "http"
    patch:
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "PATCH"
        uri: "http://${stageVariables.loadbalancer}/produtos/{id}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        type: "http"
  /status-pagamentos:
    get:
      produces:
      - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - lambda_authorizador: []
      x-amazon-apigateway-integration:
        httpMethod: "GET"
        uri: "http://${stageVariables.loadbalancer}/status-pagamentos"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        type: "http"
  /status-pedidos:
    x-amazon-apigateway-any-method:
      produces:
      - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      x-amazon-apigateway-integration:
        httpMethod: "ANY"
        uri: "http://${stageVariables.loadbalancer}/status-pedidos"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        type: "http"
securityDefinitions:
  lambda_authorizador:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    x-amazon-apigateway-authtype: "custom"
    x-amazon-apigateway-authorizer:
      authorizerUri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:389812301415:function:lambda_authorizer/invocations"
      authorizerResultTtlInSeconds: 300
      identitySource: "method.request.header.Authorization"
      type: "request"
definitions:
  Empty:
    type: "object"
    title: "Empty Schema"
x-amazon-apigateway-gateway-responses:
  DEFAULT_4XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: "'DELETE,OPTIONS'"
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  DEFAULT_5XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: "'DELETE,OPTIONS'"
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
x-amazon-apigateway-policy:
  Version: "2012-10-17"
  Statement:
  - Effect: "Allow"
    Principal: "*"
    Action: "execute-api:Invoke"
    Resource: "*"
